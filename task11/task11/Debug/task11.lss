
task11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000144  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ab  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065d  00000000  00000000  00000a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000308  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  0000138c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b0  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000057  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001823  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 91 00 	call	0x122	; 0x122 <main>
  8e:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <green_light>:

uint8_t keep_going = 1;

void green_light()
{
	PORTD |= (1 << PD0);
  96:	58 9a       	sbi	0x0b, 0	; 11
	PORTD &= ~(1 << PD1);
  98:	59 98       	cbi	0x0b, 1	; 11
	PORTD &= ~(1 << PD2);
  9a:	5a 98       	cbi	0x0b, 2	; 11
  9c:	08 95       	ret

0000009e <yellow_light>:
}

void yellow_light()
{
	PORTD &= ~(1 << PD0);
  9e:	58 98       	cbi	0x0b, 0	; 11
	PORTD |= (1 << PD1);
  a0:	59 9a       	sbi	0x0b, 1	; 11
	PORTD &= ~(1 << PD2);
  a2:	5a 98       	cbi	0x0b, 2	; 11
  a4:	08 95       	ret

000000a6 <red_light>:
}

void red_light()
{
	PORTD &= ~(1 << PD0);
  a6:	58 98       	cbi	0x0b, 0	; 11
	PORTD &= ~(1 << PD1);
  a8:	59 98       	cbi	0x0b, 1	; 11
	PORTD |= (1 << PD2);
  aa:	5a 9a       	sbi	0x0b, 2	; 11
  ac:	08 95       	ret

000000ae <combineVal>:
uint16_t combineVal()
{	
	uint16_t lowbyte;
	uint16_t highbyte;
	
	ADCSRA |= (1<<ADSC); // starts data collection
  ae:	ea e7       	ldi	r30, 0x7A	; 122
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	80 83       	st	Z, r24
	
	while(! (ADCSRA & (1<<ADIF))); // loop until ADC complete
  b8:	80 81       	ld	r24, Z
  ba:	84 ff       	sbrs	r24, 4
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <combineVal+0xa>
	
	lowbyte = ADCL;
  be:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	highbyte = ADCH;
  c2:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	
	uint16_t finalvalue;
	
	finalvalue = (highbyte<<8) | lowbyte;
	
	return finalvalue;
  c6:	90 e0       	ldi	r25, 0x00	; 0
}
  c8:	92 2b       	or	r25, r18
  ca:	08 95       	ret

000000cc <loop>:

void loop()
{	
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
	uint16_t adc_value = combineVal();
  d0:	0e 94 57 00 	call	0xae	; 0xae <combineVal>
  d4:	ec 01       	movw	r28, r24
	
	if (adc_value > 600) green_light();
  d6:	89 35       	cpi	r24, 0x59	; 89
  d8:	92 40       	sbci	r25, 0x02	; 2
  da:	10 f0       	brcs	.+4      	; 0xe0 <loop+0x14>
  dc:	0e 94 4b 00 	call	0x96	; 0x96 <green_light>
	if ((adc_value < 600) && (adc_value > 300)) yellow_light();
  e0:	ce 01       	movw	r24, r28
  e2:	8d 52       	subi	r24, 0x2D	; 45
  e4:	91 40       	sbci	r25, 0x01	; 1
  e6:	8b 32       	cpi	r24, 0x2B	; 43
  e8:	91 40       	sbci	r25, 0x01	; 1
  ea:	10 f4       	brcc	.+4      	; 0xf0 <loop+0x24>
  ec:	0e 94 4f 00 	call	0x9e	; 0x9e <yellow_light>
	if (adc_value < 300) red_light();
  f0:	cc 32       	cpi	r28, 0x2C	; 44
  f2:	d1 40       	sbci	r29, 0x01	; 1
  f4:	10 f4       	brcc	.+4      	; 0xfa <loop+0x2e>
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <red_light>
}
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <setup>:

void setup()
{
	DDRD |= (1<<PD2) | (1<<PD1) | (1<<PD0);
 100:	8a b1       	in	r24, 0x0a	; 10
 102:	87 60       	ori	r24, 0x07	; 7
 104:	8a b9       	out	0x0a, r24	; 10
	ADCSRA |= (1<<ADEN); // turn ADC on
 106:	ea e7       	ldi	r30, 0x7A	; 122
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	80 83       	st	Z, r24
	
	ADMUX |= (1<<MUX0);
 110:	ec e7       	ldi	r30, 0x7C	; 124
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	81 60       	ori	r24, 0x01	; 1
 118:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); // sets the ADC compare mode
 11a:	80 81       	ld	r24, Z
 11c:	80 64       	ori	r24, 0x40	; 64
 11e:	80 83       	st	Z, r24
 120:	08 95       	ret

00000122 <main>:
	
}

int main()
{
	setup();					// setup runs once
 122:	0e 94 80 00 	call	0x100	; 0x100 <setup>
	while(keep_going) loop();	// while (1), loop 
 126:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 12a:	88 23       	and	r24, r24
 12c:	31 f0       	breq	.+12     	; 0x13a <main+0x18>
 12e:	0e 94 66 00 	call	0xcc	; 0xcc <loop>
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 136:	81 11       	cpse	r24, r1
 138:	fa cf       	rjmp	.-12     	; 0x12e <main+0xc>
	
	return 0;
}
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	08 95       	ret

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
