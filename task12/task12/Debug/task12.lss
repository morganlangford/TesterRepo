
task12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000000fc  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000795  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f8  00000000  00000000  000009a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c4  00000000  00000000  000010a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000004c  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b0  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009c  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  8e:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <loop>:

void loop(uint8_t data)
{
	uint8_t datareceived;
	
	PORTB &= ~(1 << PB6); // Pulls chip select low
  96:	2e 98       	cbi	0x05, 6	; 5
	
	SPDR = data;
  98:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1 << SPIF)));
  9a:	0d b4       	in	r0, 0x2d	; 45
  9c:	07 fe       	sbrs	r0, 7
  9e:	fd cf       	rjmp	.-6      	; 0x9a <loop+0x4>
	
	datareceived = SPDR;
  a0:	8e b5       	in	r24, 0x2e	; 46
	
	PORTB |= (1 << PB6);
  a2:	2e 9a       	sbi	0x05, 6	; 5
  a4:	08 95       	ret

000000a6 <setup>:
}

void setup()
{
	SPCR |= (1 << SPE);
  a6:	8c b5       	in	r24, 0x2c	; 44
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1 << MSTR);
  ac:	8c b5       	in	r24, 0x2c	; 44
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1 << CPOL);
  b2:	8c b5       	in	r24, 0x2c	; 44
  b4:	88 60       	ori	r24, 0x08	; 8
  b6:	8c bd       	out	0x2c, r24	; 44
	/*
	SPCR &= ~(1<<SPIE);
	SPCR &= ~(1<<DORD);
	SPCR &= ~(1<<CPHA);
	*/
	DDRB |= (1<<PB3) | (1<<PB5) | (1<<PB2) | (1<<PB6); // MOSI, SCK, SS 'slave select', chip select
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	8c 66       	ori	r24, 0x6C	; 108
  bc:	84 b9       	out	0x04, r24	; 4
  be:	08 95       	ret

000000c0 <main>:
}

int main()
{
  c0:	cf 93       	push	r28
	setup();					
  c2:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	while(keep_going)
  c6:	10 c0       	rjmp	.+32     	; 0xe8 <main+0x28>
  c8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		uint8_t i = 0;
		while (i < 127)
		{
			loop(i);
  ca:	8c 2f       	mov	r24, r28
  cc:	0e 94 4b 00 	call	0x96	; 0x96 <loop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f eb       	ldi	r18, 0xBF	; 191
  d2:	84 ed       	ldi	r24, 0xD4	; 212
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x16>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x20>
  e0:	00 00       	nop
			_delay_ms(600);
			i++;
  e2:	cf 5f       	subi	r28, 0xFF	; 255
{
	setup();					
	while(keep_going)
	{
		uint8_t i = 0;
		while (i < 127)
  e4:	cf 37       	cpi	r28, 0x7F	; 127
  e6:	89 f7       	brne	.-30     	; 0xca <main+0xa>
}

int main()
{
	setup();					
	while(keep_going)
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ec:	81 11       	cpse	r24, r1
  ee:	ec cf       	rjmp	.-40     	; 0xc8 <main+0x8>
			i++;
		}
	} 
		
	return 0;
}
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
